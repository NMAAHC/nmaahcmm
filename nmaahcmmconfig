#!/usr/bin/env bash
# nmaahcmmconfig - configure system variables for NMAAHC microservices

# Color setup
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CONFIG="Y"
SCRIPT_PATH="${0%/*}"

# Source function library
. "${SCRIPT_PATH}/nmaahcmmfunctions"
[[ -f "${SCRIPT_PATH}/nmaahcmmfunctions" ]] || {
    echo "${RED}Missing function file. Exiting.${RESET}"
    exit 1
}

NMAAHCMM_CONFIG_FILE="${SCRIPTDIR}/nmaahcmm.conf"

# Default to GUI mode
RUNSWIFTDIALOG="Y"
SWIFTDIALOG_PATH="/usr/local/bin/dialog"

# Usage helper
_usage(){
    cat <<EOS
${BOLD}Usage:${RESET} $(basename "$0")
  -a    Use GUI (SwiftDialog)
  -t    Use CLI
  -h    Help
EOS
}

REQUIRED_VARIABLES=("DPX_DESTINATION" "DRIVE_CONTENTS_DESTINATION" "LOGDIR" "TMPDIR" "AIP_DESTINATION")

# Parse options
OPTIND=1
while getopts ":ath" OPT ; do
    case "$OPT" in
        a) RUNSWIFTDIALOG="Y" ;;
        t) RUNSWIFTDIALOG="N" ;;
        h) _usage ; exit 0 ;;
        *) echo "${RED}Invalid option -${OPTARG}${RESET}" ; _usage ; exit 1 ;;
    esac
done

# Edit helper
_config_edit(){
    [ -z "$1" -o -z "$2" ] && { _report -r "${RED}Missing arguments to _config_edit${RESET}" ; exit ;}
    SEDTEMP=$(_maketemp)
    sed "s:^$1=.*$:$1=\"$2\":" "$NMAAHCMM_CONFIG_FILE" > "$SEDTEMP"
    cp "$SEDTEMP" "$NMAAHCMM_CONFIG_FILE"
}

# Test directories
_test_config(){
    for VAR in LOGDIR DPX_DESTINATION DRIVE_CONTENTS_DESTINATION AIP_DESTINATION ; do
        [ ! -d "${!VAR}" ] && _report -r "${RED}${VAR} is NOT a valid directory${RESET}"
    done
}

# Add missing keys
_add_key(){
    KEY="$1"
    grep -q "^$KEY=" "$NMAAHCMM_CONFIG_FILE" || {
        _report -td "${YELLOW}Adding $KEY to config${RESET}"
        echo "$KEY=" >> "$NMAAHCMM_CONFIG_FILE"
    }
}

# --- GUI MODE ---
if [[ "$RUNSWIFTDIALOG" == "Y" ]] ; then
    if [[ ! -x "$SWIFTDIALOG_PATH" ]]; then
        echo
        echo "${RED}${BOLD}ERROR:${RESET} ${RED}SwiftDialog not found at ${SWIFTDIALOG_PATH}.${RESET}"
        echo "${YELLOW}Falling back to CLI configuration mode.${RESET}"
        echo
        RUNSWIFTDIALOG="N"
    fi
fi

if [[ "$RUNSWIFTDIALOG" == "Y" ]]; then
    _run_swiftdialog_config_ui "$HOME"

    # Save to config file
    {
        echo "AIP_DESTINATION=\"$AIP_DESTINATION\""
        echo "DPX_DESTINATION=\"$DPX_DESTINATION\""
        echo "DRIVE_CONTENTS_DESTINATION=\"$DRIVE_CONTENTS_DESTINATION\""
        echo "LOGDIR=\"$LOGDIR\""
        echo "TMPDIR=\"$TMPDIR\""
    } > "$NMAAHCMM_CONFIG_FILE"

# --- CLI MODE ---
else
    for VAR in "${REQUIRED_VARIABLES[@]}" ; do _add_key "$VAR" ; done
    _report -d "${BOLD}$(basename "$0")${RESET}"
    _report -d "${BLUE}Setting system variables for ${WHAT_IS_THIS}${RESET}"
    _report -d "${YELLOW}Validating config...${RESET}"
    _test_config

    _report -d "${GREEN}Current configuration:${RESET}"
    for VAR in "${REQUIRED_VARIABLES[@]}" ; do
        VALUE=$(grep "^$VAR=" "$NMAAHCMM_CONFIG_FILE" | cut -d= -f2-)
        printf '\t%-30s %-40s\n' "$VAR" "$VALUE"
    done

    while true ; do
        _report -q "${BLUE}Edit a variable?${RESET}"
        PS3="${YELLOW}Select option: ${RESET}"
        select VAR in "Edit config in nano" "Edit config in TextMate" "${REQUIRED_VARIABLES[@]}" "Quit" ; do break ; done

        case "$VAR" in
            "Edit config in nano") nano "$NMAAHCMM_CONFIG_FILE" ; exit 0 ;;
            "Edit config in TextMate") mate "$NMAAHCMM_CONFIG_FILE" ; exit 0 ;;
            "Quit") echo "${GREEN}Goodbye.${RESET}" ; exit 0 ;;
            *)
                echo -n "${BOLD}Enter new value for $VAR:${RESET} "
                read -e CONFIG_VALUE
                echo "$VAR set to ${GREEN}$CONFIG_VALUE${RESET}"
                _config_edit "$VAR" "$CONFIG_VALUE"
                ;;
        esac
    done
fi
