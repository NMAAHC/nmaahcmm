#!/usr/bin/env bash

# nmaahcmmfunctions
# Shared function library for NMAAHC Media Microservices

# -------------------------------------------------------------------
# INITIAL SETUP
# -------------------------------------------------------------------

SCRIPTDIR=$(dirname "${0}")
NMAAHCMM_CONFIG_FILE="${SCRIPTDIR}/nmaahcmm.conf"
GM_CONFIG_FILE="${SCRIPTDIR}/gm.conf"
WHAT_IS_THIS="NMAAHC Media Microservices"

# Load NMAAHCMM config if present
if [ -f "${NMAAHCMM_CONFIG_FILE}" ]; then
    . "${NMAAHCMM_CONFIG_FILE}"
elif [[ "${CONFIG}" != "Y" && "${REQUIRECONFIG}" != "N" ]]; then
    echo "Missing ${NMAAHCMM_CONFIG_FILE}. Run nmaahcmmconfig first." >&2
    exit 1
fi

# Ensure LOGDIR exists
[[ -n "${LOGDIR}" && ! -d "${LOGDIR}" ]] && mkdir -p "${LOGDIR}"

# Load GM config if needed
if [ -f "${GM_CONFIG_FILE}" ]; then
    . "${GM_CONFIG_FILE}"
elif [[ "${CONFIG}" != "Y" && "${REQUIRECONFIG}" != "N" && "${CONFIG_TYPE}" == "GM" ]]; then
    echo "Missing ${GM_CONFIG_FILE}. Run gmconfig first." >&2
    exit 1
fi

# -------------------------------------------------------------------
# GENERAL UTILITIES
# -------------------------------------------------------------------

_setcolors(){
    date="$(date +%Y%m%d)"
    BIWHITE=$(tput bold)$(tput setaf 7)
    BIRED=$(tput bold)$(tput setaf 1)
    BIYELLOW=$(tput bold)$(tput setaf 3)
    GRAY=$(tput setaf 7)
    COLOR_OFF=$(tput sgr0)
}

_initialize_make(){
    trap '_report -rt "Process cancelled"; exit 1' SIGHUP SIGINT SIGTERM
}

_mkdir(){
    for dir in "$@"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir" || {
                _report -rt "Cannot create directory at $dir"
                exit 1
            }
        fi
    done
}

_removehidden(){
    [[ -z "$1" ]] && { cowsay "No argument provided. Tootles."; return; }
    find "$1" -name ".*" -exec rm -vfr {} +
}

_sortk2(){
    [[ -z "$1" ]] && { cowsay "No file provided. Tootles."; return; }
    sort -k 2 -o "$1" "$1"
    cowsay "File sorted by 2nd column. Tootles."
}

_seconds_to_hhmmss(){
    local num=$1
    printf "%02d:%02d:%02d\n" $(($num/3600)) $(($num%3600/60)) $(($num%60))
}

_check_rsync_output(){
    [[ $? -ne 0 ]] && ((RSYNC_ERROR_COUNT++))
}

_check_dependencies(){
    local missing=0
    for dep in "$@"; do
        if ! command -v "$dep" >/dev/null; then
            _report -r "Missing dependency: $dep"
            echo "Try: brew install $dep (macOS) or sudo apt install $dep (Linux)"
            missing=1
        fi
    done
    [[ $missing -eq 1 ]] && exit 1
}

_report(){
    local RED=$(tput setaf 1)
    local GREEN=$(tput setaf 2)
    local BLUE=$(tput setaf 4)
    local NC=$(tput sgr0)
    local COLOR=""
    local LOG_MESSAGE=""
    local PREFIX=""
    local ECHOOPT=""
    local OPTIND=1

    while getopts ":bgrstn" opt; do
        case $opt in
            b) COLOR="$BLUE" ;;
            g) COLOR="$GREEN" ;;
            r) COLOR="$RED"; LOG_MESSAGE="Y" ;;
            s) PREFIX+="[$(basename "$0")] " ;;
            t) PREFIX+="$(date +%FT%T) - " ;;
            n) ECHOOPT="-n" ;;
        esac
    done
    shift $((OPTIND - 1))

    echo $ECHOOPT "${COLOR}${PREFIX}$*${NC}"
    [[ "$LOG_MESSAGE" == "Y" ]] && _log -w "$*"
}

_log(){
    [[ -z "$LOGDIR" ]] && return
    local LOGFILE="$LOGDIR/nmaahcmm.log"
    mkdir -p "$LOGDIR"

    local STATUS=""
    while getopts ":beacw" opt; do
        case $opt in
            b) STATUS="start" ;;
            e) STATUS="end" ;;
            a) STATUS="abort" ;;
            c) STATUS="comment" ;;
            w) STATUS="warning" ;;
        esac
    done
    shift $((OPTIND - 1))

    echo "$(date +%FT%T), $(basename "$0") $STATUS $*" >> "$LOGFILE"
}

_writelog(){
    [[ -z "$LOG" ]] && { echo "LOG variable is unset"; exit 1; }
    [[ ! -f "$LOG" ]] && { mkdir -p "$(dirname "$LOG")"; touch "$LOG"; }

    local KEY="$1"
    local VALUE="$2"
    [[ "$3" == "-t" ]] && VALUE="$(date +%FT%T)"
    echo "$KEY: $VALUE" >> "$LOG"
}

_writeerrorlog(){
    local FUNCTION_NAME="${1}"
    local ERROR_MESSAGE="${2}"
    local LOGFILE="${LOGDIR}/nmaahcmm-error.log"

    [[ -z "$FUNCTION_NAME" || -z "$ERROR_MESSAGE" ]] && return

    mkdir -p "$LOGDIR"
    echo "$(date +%FT%T), ERROR in ${FUNCTION_NAME}: ${ERROR_MESSAGE}" >> "$LOGFILE"
}

_maketemp(){
    mktemp -q "/tmp/$(basename "${0}").XXXXXX"
    if [ "${?}" -ne 0 ]; then
        _report -rt "${0}: Can't create temp file, exiting..."
        _writeerrorlog "_maketemp" "was unable to create the temp file, so the script had to exit."
        exit 1
    fi
}

_check_deliverdir(){
    if [[ ! -d "${DELIVERDIR}" ]] ; then
        _report -rt "The delivery directory, ${DELIVERDIR}, does not exist. Cannot deliver the output of $(basename "${0}")."
    fi
}

# -------------------------------------------------------------------
# SWIFTDIALOG CONFIG UI
# -------------------------------------------------------------------

_run_swiftdialog_config_ui(){
    DEFAULT_PATH="$1"
    DIALOG="/usr/local/bin/dialog"

    if [[ ! -x "$DIALOG" ]]; then
        _report -r "SwiftDialog not found at $DIALOG. Install it here: https://swiftdialog.app/"
        return 1
    fi

    JSON_FILE=$(_maketemp)
    cat > "$JSON_FILE" <<EOF
{
  "title": "Configure NMAAHC Microservices",
  "message": "Select a folder for each configuration item.",
  "icon": "SF=folder",
  "button1text": "Save",
  "button2text": "Cancel",
  "textfield": [
    { "title": "AIP_DESTINATION", "prompt": "Select AIP Destination Folder", "folderselect": true, "required": true, "default": "$DEFAULT_PATH" },
    { "title": "DPX_DESTINATION", "prompt": "Select DPX Destination Folder", "folderselect": true, "required": true, "default": "$DEFAULT_PATH" },
    { "title": "DRIVE_CONTENTS_DESTINATION", "prompt": "Select Drive Contents Destination", "folderselect": true, "required": true, "default": "$DEFAULT_PATH" },
    { "title": "LOGDIR", "prompt": "Select Log Directory", "folderselect": true, "required": true, "default": "$DEFAULT_PATH" },
    { "title": "TMPDIR", "prompt": "Select Temp Directory", "folderselect": true, "required": true, "default": "$DEFAULT_PATH" }
  ]
}
EOF

    JSON_OUTPUT=$("$DIALOG" --jsonfile "$JSON_FILE")
    [[ $? -ne 0 || -z "$JSON_OUTPUT" ]] && { _report -r "Configuration canceled or failed."; return 1; }

    AIP_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."AIP_DESTINATION"')
    DPX_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."DPX_DESTINATION"')
    DRIVE_CONTENTS_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."DRIVE_CONTENTS_DESTINATION"')
    LOGDIR=$(echo "$JSON_OUTPUT" | jq -r '."LOGDIR"')
    TMPDIR=$(echo "$JSON_OUTPUT" | jq -r '."TMPDIR"')

    # Remove trailing slashes
    AIP_DESTINATION="${AIP_DESTINATION%/}"
    DPX_DESTINATION="${DPX_DESTINATION%/}"
    DRIVE_CONTENTS_DESTINATION="${DRIVE_CONTENTS_DESTINATION%/}"
    LOGDIR="${LOGDIR%/}"
    TMPDIR="${TMPDIR%/}"

    _report -g "Configuration set using SwiftDialog:"
    echo "  AIP_DESTINATION = $AIP_DESTINATION"
    echo "  DPX_DESTINATION = $DPX_DESTINATION"
    echo "  DRIVE_CONTENTS_DESTINATION = $DRIVE_CONTENTS_DESTINATION"
    echo "  LOGDIR = $LOGDIR"
    echo "  TMPDIR = $TMPDIR"
}
