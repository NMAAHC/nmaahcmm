#!/usr/bin/env bash

# nmaahcmmfunctions
# Shared function library for NMAAHC Media Microservices

# -------------------------------------------------------------------
# INITIAL SETUP
# -------------------------------------------------------------------

SCRIPTDIR=$(dirname "${0}")
NMAAHCMM_CONFIG_FILE="${SCRIPTDIR}/nmaahcmm.conf"
GM_CONFIG_FILE="${SCRIPTDIR}/gm.conf"
WHAT_IS_THIS="NMAAHC Media Microservices"

# Load NMAAHCMM config if present
if [ -f "${NMAAHCMM_CONFIG_FILE}" ]; then
    . "${NMAAHCMM_CONFIG_FILE}"
elif [[ "${CONFIG}" != "Y" && "${REQUIRECONFIG}" != "N" ]]; then
    echo "Missing ${NMAAHCMM_CONFIG_FILE}. Run nmaahcmmconfig first." >&2
    exit 1
fi

# Ensure LOGDIR exists
[[ -n "${LOGDIR}" && ! -d "${LOGDIR}" ]] && mkdir -p "${LOGDIR}"

# Load GM config if needed
if [ -f "${GM_CONFIG_FILE}" ]; then
    . "${GM_CONFIG_FILE}"
elif [[ "${CONFIG}" != "Y" && "${REQUIRECONFIG}" != "N" && "${CONFIG_TYPE}" == "GM" ]]; then
    echo "Missing ${GM_CONFIG_FILE}. Run gmconfig first." >&2
    exit 1
fi

# -------------------------------------------------------------------
# GENERAL UTILITIES
# -------------------------------------------------------------------

_setcolors(){
    date="$(date +%Y%m%d)"
    BIWHITE=$(tput bold)$(tput setaf 7)
    BIRED=$(tput bold)$(tput setaf 1)
    BIYELLOW=$(tput bold)$(tput setaf 3)
    GRAY=$(tput setaf 7)
    COLOR_OFF=$(tput sgr0)
}

_initialize_make(){
    trap '_report -rt "Process cancelled"; exit 1' SIGHUP SIGINT SIGTERM
}

_mkdir(){
    for dir in "$@"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir" || {
                _report -rt "Cannot create directory at $dir"
                exit 1
            }
        fi
    done
}

_removehidden(){
    [[ -z "$1" ]] && { cowsay "No argument provided. Tootles."; return; }
    find "$1" -name ".*" -exec rm -vfr {} +
}

_sortk2(){
    [[ -z "$1" ]] && { cowsay "No file provided. Tootles."; return; }
    sort -k 2 -o "$1" "$1"
    cowsay "File sorted by 2nd column. Tootles."
}

_seconds_to_hhmmss(){
    local num=$1
    printf "%02d:%02d:%02d\n" $(($num/3600)) $(($num%3600/60)) $(($num%60))
}

_check_rsync_output(){
    [[ $? -ne 0 ]] && ((RSYNC_ERROR_COUNT++))
}

_check_dependencies(){
    local missing=0
    for dep in "$@"; do
        if ! command -v "$dep" >/dev/null; then
            _report -r "Missing dependency: $dep"
            echo "Try: brew install $dep (macOS) or sudo apt install $dep (Linux)"
            missing=1
        fi
    done
    [[ $missing -eq 1 ]] && exit 1
}

_report(){
    local RED=$(tput setaf 1)
    local GREEN=$(tput setaf 2)
    local BLUE=$(tput setaf 4)
    local NC=$(tput sgr0)
    local COLOR=""
    local LOG_MESSAGE=""
    local PREFIX=""
    local ECHOOPT=""
    local OPTIND=1

    while getopts ":bgrstn" opt; do
        case $opt in
            b) COLOR="$BLUE" ;;
            g) COLOR="$GREEN" ;;
            r) COLOR="$RED"; LOG_MESSAGE="Y" ;;
            s) PREFIX+="[$(basename "$0")] " ;;
            t) PREFIX+="$(date +%FT%T) - " ;;
            n) ECHOOPT="-n" ;;
        esac
    done
    shift $((OPTIND - 1))

    echo $ECHOOPT "${COLOR}${PREFIX}$*${NC}"
    [[ "$LOG_MESSAGE" == "Y" ]] && _log -w "$*"
}

_log(){
    [[ -z "$LOGDIR" ]] && return
    local LOGFILE="$LOGDIR/nmaahcmm.log"
    mkdir -p "$LOGDIR"

    local STATUS=""
    while getopts ":beacw" opt; do
        case $opt in
            b) STATUS="start" ;;
            e) STATUS="end" ;;
            a) STATUS="abort" ;;
            c) STATUS="comment" ;;
            w) STATUS="warning" ;;
        esac
    done
    shift $((OPTIND - 1))

    echo "$(date +%FT%T), $(basename "$0") $STATUS $*" >> "$LOGFILE"
}

_writelog(){
    [[ -z "$LOG" ]] && { echo "LOG variable is unset"; exit 1; }
    [[ ! -f "$LOG" ]] && { mkdir -p "$(dirname "$LOG")"; touch "$LOG"; }

    local KEY="$1"
    local VALUE="$2"
    [[ "$3" == "-t" ]] && VALUE="$(date +%FT%T)"
    echo "$KEY: $VALUE" >> "$LOG"
}

_writeerrorlog(){
    local FUNCTION_NAME="${1}"
    local ERROR_MESSAGE="${2}"
    local LOGFILE="${LOGDIR}/nmaahcmm-error.log"

    [[ -z "$FUNCTION_NAME" || -z "$ERROR_MESSAGE" ]] && return

    mkdir -p "$LOGDIR"
    echo "$(date +%FT%T), ERROR in ${FUNCTION_NAME}: ${ERROR_MESSAGE}" >> "$LOGFILE"
}

_maketemp(){
    mktemp -q "/tmp/$(basename "${0}").XXXXXX"
}

_check_deliverdir(){
    if [[ ! -d "${DELIVERDIR}" ]] ; then
        _report -rt "The delivery directory, ${DELIVERDIR}, does not exist. Cannot deliver the output of $(basename "${0}")."
    fi
}

# -------------------------------------------------------------------
# SWIFTDIALOG CONFIG UI
# -------------------------------------------------------------------

_run_swiftdialog_config_ui() {
    local DEFAULT_PATH="$1"
    local DIALOG="/usr/local/bin/dialog"

    if [[ ! -x "$DIALOG" ]]; then
        _report -r "swiftDialog not found at $DIALOG. Install it here: https://swiftdialog.app/"
        return 1
    fi

    # Resolve absolute path to logo (relative to this script)
    local SCRIPT_ROOT
    SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    local ICON_PATH="$SCRIPT_ROOT/images/nmaahc_logos/NMAAHC_vert_purple.png"

    # JSON config file for dialog
    local JSON_FILE=$(_maketemp)
    cat > "$JSON_FILE" <<EOF
    {
      "title": "Configure NMAAHC TBM Preservation Microservices",
      "messagealignment": "left",
      "messageposition": "top",
      "messagefont": "size=18,color=white",
      "message": "**Welcome $USER! This is the NMAAHC TBM Preservation Microservices Setup**\\n\\n\
Please select a folder for each configuration item below:\\n\\n\
- **AIP_DESTINATION**: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. \\n\\n\
- **DPX_DESTINATION**: Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam.\\n\\n\
- **DRIVE_CONTENTS_DESTINATION**: Sed nisi. Nulla quis sem at nibh elementum imperdiet. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Sed nisi. Nulla quis sem at nibh elementum imperdiet.\\n\\n\
- **LOGDIR**: Duis sagittis ipsum. Praesent mauris. Duis sagittis ipsum. Praesent mauris. Duis sagittis ipsum. Praesent mauris.\\n\\n\
- **TMPDIR**: Fusce nec tellus sed augue semper porta. Fusce nec tellus sed augue semper porta. Fusce nec tellus sed augue semper porta.",
      "icon": "$ICON_PATH",
      "iconsize": 200,
      "background": "color=#6124a6",
      "ontop": 1,
      "moveable": 1,
      "width": "75%",
      "height": "75%",
      "button1text": "Save",
      "button2text": "Cancel",
      "infobox": "### Additional Info\\n\\n#### Item 1\\n- Point one\\n- Point two\\n\\n#### Item 2\\n- Point three\\n- Point four",
      "textfield": [
    {
      "title": "AIP_DESTINATION",
      "prompt": "Select AIP Destination Folder",
      "fileselect": true,
      "filetype": "folder",
      "required": true,
      "value": "$DEFAULT_PATH"
    },
    {
      "title": "DPX_DESTINATION",
      "prompt": "Select DPX Destination Folder",
      "fileselect": true,
      "filetype": "folder",
      "required": true,
      "value": "$DEFAULT_PATH"
    },
    {
      "title": "DRIVE_CONTENTS_DESTINATION",
      "prompt": "Select Drive Contents Destination",
      "fileselect": true,
      "filetype": "folder",
      "required": true,
      "value": "$DEFAULT_PATH"
    },
    {
      "title": "LOGDIR",
      "prompt": "Select Log Directory",
      "fileselect": true,
      "filetype": "folder",
      "required": true,
      "value": "$DEFAULT_PATH"
    },
    {
      "title": "TMPDIR",
      "prompt": "Select Temp Directory",
      "fileselect": true,
      "filetype": "folder",
      "required": true,
      "value": "$DEFAULT_PATH"
    }
  ]
}
EOF


    local OUTPUT_FILE=$(_maketemp)
    local SWIFTDIALOG_STDERR=$(_maketemp)

    if [[ -z "$OUTPUT_FILE" || -z "$SWIFTDIALOG_STDERR" ]]; then
        _report -r "Unable to create temporary files for capturing swiftDialog output."
        return 1
    fi

    "$DIALOG" --jsonfile "$JSON_FILE" --json > "$OUTPUT_FILE" 2> "$SWIFTDIALOG_STDERR"
    cat "$OUTPUT_FILE" > /tmp/nmaahcmm_swiftdialog_debug.json

    if [[ $? -ne 0 || ! -s "$OUTPUT_FILE" ]] || ! jq empty "$OUTPUT_FILE" &>/dev/null; then
        _report -r "Configuration canceled or returned invalid data."
        _report -r "swiftDialog error output:"
        cat "$SWIFTDIALOG_STDERR"
        return 1
    fi

    local JSON_OUTPUT
    JSON_OUTPUT=$(cat "$OUTPUT_FILE")

    AIP_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."AIP_DESTINATION"')
    DPX_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."DPX_DESTINATION"')
    DRIVE_CONTENTS_DESTINATION=$(echo "$JSON_OUTPUT" | jq -r '."DRIVE_CONTENTS_DESTINATION"')
    LOGDIR=$(echo "$JSON_OUTPUT" | jq -r '."LOGDIR"')
    TMPDIR=$(echo "$JSON_OUTPUT" | jq -r '."TMPDIR"')

    AIP_DESTINATION="${AIP_DESTINATION%/}"
    DPX_DESTINATION="${DPX_DESTINATION%/}"
    DRIVE_CONTENTS_DESTINATION="${DRIVE_CONTENTS_DESTINATION%/}"
    LOGDIR="${LOGDIR%/}"
    TMPDIR="${TMPDIR%/}"

    local GREEN=$(tput setaf 2)
    local GRAY=$(tput setaf 7)
    local BOLD=$(tput bold)
    local RESET=$(tput sgr0)
    local FULL_CONFIG_PATH
    FULL_CONFIG_PATH=$(realpath "$NMAAHCMM_CONFIG_FILE")

    echo
    echo "${GRAY}------------------------------------------------------------${RESET}"
    _report -g "Configuration set using swiftDialog:"
    printf "  %-30s %s%s%s\n" "AIP_DESTINATION:"            "$GREEN" "$AIP_DESTINATION" "$RESET"
    printf "  %-30s %s%s%s\n" "DPX_DESTINATION:"            "$GREEN" "$DPX_DESTINATION" "$RESET"
    printf "  %-30s %s%s%s\n" "DRIVE_CONTENTS_DESTINATION:" "$GREEN" "$DRIVE_CONTENTS_DESTINATION" "$RESET"
    printf "  %-30s %s%s%s\n" "LOGDIR:"                     "$GREEN" "$LOGDIR" "$RESET"
    printf "  %-30s %s%s%s\n" "TMPDIR:"                     "$GREEN" "$TMPDIR" "$RESET"
    echo "${GRAY}------------------------------------------------------------${RESET}"
    printf "%sConfiguration is saved to:%s %s%s%s\n\n" "$BOLD" "$RESET" "$GREEN" "$FULL_CONFIG_PATH" "$RESET"
}
